---
title: "Recent developments in scNavigator"
author: "Konstantin Zaitsev"
date: "14/09/2022"
format: 
  revealjs: 
    slide-number: true
    theme: [libs/itmo.scss]
    footer: "Artyomov Lab Meeting (Sep 14th 2022)"
editor: source
---

## scRNA-seq is on the rise

Publications based on pubmed results "single cell rna sequencing"

```{r}
#| echo: false

library(ggplot2)
data <- read.csv("PubMed_Timeline_Results_by_Year.csv", sep=",", skip = 1)
ggplot(data=data, aes(x=Year, y=Count)) +
  geom_point() + geom_line() + theme_bw() + scale_x_continuous(limits =c(2009, 2021), breaks=2009:2021)
  
```


## Drop-seq schematics


![](images/scheme_3.png)

::: footer
Paper: [https://www.cell.com/abstract/S0092-8674(15)00549-8](https://www.cell.com/abstract/S0092-8674(15)00549-8)
:::
---

## Barcoding

![](images/barcoded_beads-04.png)


---

## Drop-seq schematics

![](images/scheme_3.png)

::: footer
Paper: [https://www.cell.com/abstract/S0092-8674(15)00549-8](https://www.cell.com/abstract/S0092-8674(15)00549-8)
:::

---
## Sequencing

![](images/umis7.png)


---

## Sequencing

![](images/umis8.png)

---

## Creating a map of the dataset


![](images/pbmc_katyas.png)


::: footer
Paper: [https://nn.neurology.org/content/nnn/7/4/e732.full.pdf](https://nn.neurology.org/content/nnn/7/4/e732.full.pdf)
:::
---


## scNavigator

[https://artyomovlab.wustl.edu/scn/](https://artyomovlab.wustl.edu/scn/)

![](images/schematic.png)

## scNavigator

-  Web tool for visual analysis of scRNA-seq data: gene expression plots, pathway expression plots, clustering and so on
-  Database of uniformly processed public scRNA-seq datasets
-  Gene signature search / single gene search through public scRNA-seq datasets

## scNavigator (code base)

- scNavigator - [https://github.com/ctlab/scNavigator](https://github.com/ctlab/scNavigator). 

Kotlin server side + a lot of JavaScript client side.


- scn-pipeline - [https://github.com/ctlab/scn-pipeline](https://github.com/ctlab/scn-pipeline). 

Snakemake pipeline for processing public datasets.


- scnPrep - [https://github.com/ctlab/SCNPrep](https://github.com/ctlab/SCNPrep). 

R package to convert Seurat objects to format of scNavigator.


## scn-pipeline

-  Spring/Summer 2022
-  Huge rework of the old code base from Maria Firuleva
-  Old: custom scripts that would generate analysis pipeline specific for the platform (Slurm or LSF)
-  Currently: one snakemake pipeline that does everything (you can use slurm or LSF profiles to run the pipeline)

## scn-pipeline: current and future plans

Repo:

-  Github Repo: [https://github.com/ctlab/scn-pipeline](https://github.com/ctlab/scn-pipeline)
-  Please use [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/)
-  Releases and changelogs are generated by `release-please` github action, that parses conventional commits for changes
-  Documentation [https://scn-pipeline.readthedocs.io/en/latest/](https://scn-pipeline.readthedocs.io/en/latest/) is build automatically from `docs`

Branches:

-  Branch "main" - only processing until Seurat file
-  Branch "scn" (work in progress) - all additional rules specific to SCN and lab in general (conversion of seurat object to internal SCN format, calculating PCAs for GESECA and any other file reformatting)


## scn-pipeline, how to run

Put the dataset you want to process in the `config/datasets.json` file as a list of datasets, example below.

```{{json}}
["GSE145241", "GSE116240"]
```

and then simply execute two rules (example for local execution):

```{{bash}}
snakemake -j 4 --use-conda get_all_meta
snakemake -j 4 --use-conda process_all
```

-  `get_all_meta` - will obtain all the meta information about the dataset required for processing
-  `process_all` - will use the obtained meta and process the datasets


## `get_all_meta`

::: columns
::: {.column width="60%"}
-   We use [FFQ](https://github.com/pachterlab/ffq) to obtain meta information about the dataset: samples, runs, paths to files, MD5sums for ftp files, species and so on
-   We get the 10x whitelists from cellranger
-   We use python scripts to obtain all additional information about the dataset: technology, version, which files to use (fastq-dump or get the files from FTP) and we mark read files as `cdna`, `barcode` or `index`
-   We combine the results for all datasets
:::

::: {.column width="40%"}
![](images/meta_rulegraph.svg)
:::
:::

::: footer
FFQ - [https://github.com/pachterlab/ffq](https://github.com/pachterlab/ffq)
:::

## `get_all_meta`

::: columns
::: {.column width="60%"}
-   It's important that **for every dataset after this step we know the technology and version** and this technology should be supported by our pipeline
:::

::: {.column width="40%"}
![](images/meta_rulegraph.svg)
:::
:::

## `get_all_meta` - known problems

::: columns
::: {.column width="60%"}

No NCBI API key:

-   FFQ doesn't allow to provide NCBI API KEY
-   if you submit to many requests in parallel it can fail to return the results
-   solution: resubmit the rule
-   hardcore solution: pull request to FFQ with the feature

NCBI FTP is unreliable:

-   If we can't identify the technology using fastq-dump, we look for files in FTP. And FTP is quite often down.
-   solution: resubmit the rule later

:::

::: {.column width="40%"}
![](images/meta_rulegraph.svg)
:::
:::


## `get_all_meta` - known problems

::: columns
::: {.column width="60%"}

Different parts of NCBI API can change:

-   FFQ might return different results later (it already happened once)
-   solution: there is really none, just to be conscious about it
:::

::: {.column width="40%"}
![](images/meta_rulegraph.svg)
:::
:::


## `process_all`

::: columns
::: {.column width="50%"}
-   For each run: we get the raw files using `parallel-fastq-dump` or downloading them from FTP (if SRA files are not good)
-   For species: we use STAR index build on of cellranger fasta and gtf files
-   For sample: we create a STAR (STARSolo) script that combines raw files from all the runs, and then run it
:::

::: {.column width="50%"}
![](images/process_rulegraph.svg)
:::
:::


## STARSolo instead of kallisto {.smaller}

|           |            | % pseudoaligned   | % aligned to gene |
|-----------|------------|-------------------|-------------------|
| Dataset   | Sample     | Kallisto bustools | STARSolo          |
| GSE124494 | GSM3535276 |             58.20 |             59.80 |
|           | GSM3535277 |             58.00 |             60.13 |
|           | GSM3535278 |             27.70 |             29.07 |
|           | GSM3535279 |             61.70 |             64.99 |
|           | GSM3535280 |             59.30 |             61.65 |
|           | GSM3535281 |             56.20 |             57.74 |
| GSE155593 | GSM4708389 |             57.90 |             60.71 |
|           | GSM4708390 |             58.90 |             61.39 |
| GSE185890 | GSM5625332 |             56.70 |             53.79 |
|           | GSM5625333 |             54.80 |             51.95 |

## STARSolo instead of kallisto {.smaller}

|               |            | Speed (read per second) |            |            |
|---------------|------------|-------------------------|------------|------------|
| Dataset       | Sample     | Kallisto bustools       | Alevin fry | STARSolo   |
| GSE124494     | GSM3535276 |              332,907.70 | 250,619.42 | 102,663.21 |
|               | GSM3535277 |              315,435.09 | 264,855.05 |  98,317.58 |
|               | GSM3535278 |              488,236.53 | 392,851.08 | 195,205.96 |
|               | GSM3535279 |              314,108.38 | 224,630.20 |  98,614.58 |
|               | GSM3535280 |              304,400.29 | 211,894.14 |  94,517.14 |
|               | GSM3535281 |              325,220.98 | 205,816.24 | 102,972.63 |
| GSE155593     | GSM4708389 |              247,426.65 | 302,396.01 |  76,950.31 |
|               | GSM4708390 |              238,196.30 | 278,436.23 |  80,355.54 |
| GSE185890     | GSM5625332 |              232,489.18 | 303,885.39 | 107,534.46 |
|               | GSM5625333 |              237,147.57 | 317,799.00 | 106,614.43 |
| Average speed |            |              303,556.87 | 275,318.27 | 106,374.58 |

## STARSolo instead of kallisto

-  STAR seems to be a bit better than kallisto in alignment quality
-  Only 2-3 times slower
-  Allows more QC
-  Allows to easier add new technologies due to barcode geometry
-  Supports two types of filtering: 

```
--soloCellFilter  CellRanger2.2 # Knee filtering is similar to the method used by CellRanger 2.2.x.
--soloCellFilter  EmptyDrops_CR # EmptyDrop-like filtering used by CellRanger >= 3.0.0
```

::: footer
[https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md](https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md)
:::

## STARSolo barcode geometry

![](images/barcode_geometry.png)

::: footer
[https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md](https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md)
:::

## STARSolo barcode geometry

![](images/barcode_geometry2.png)

::: footer
[https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md](https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md)
:::


## `process_all`: Seurat analysis

::: columns
::: {.column width="50%"}
-   [MiQC](https://bioconductor.org/packages/release/bioc/html/miQC.html) to remove cells with high mitochondrial content
-   SCTransform to normalize
-   PCA
-   TSNE / UMAP (from 20 PCA dims)
-   Clustering (from 20 PCA dims)
-   Markers / Averaged expression / PCT expression
-   Integration is done using approach described in [here](https://www.cell.com/cell/fulltext/S0092-8674(19)30559-8) on SCTransform'ed datasets
:::

::: {.column width="50%"}
![](images/process_rulegraph.svg)
:::
:::

::: footer
Vignette for integration: [https://satijalab.org/seurat/articles/integration_introduction.html#performing-integration-on-datasets-normalized-with-sctransform-1](https://satijalab.org/seurat/articles/integration_introduction.html#performing-integration-on-datasets-normalized-with-sctransform-1)

Publication: [Comprehensive Integration of Single-Cell Data](https://www.cell.com/cell/fulltext/S0092-8674(19)30559-8)
:::

## Results of the pipeline

-  Seurat RDS files (for samples and merged datasets)
-  Markers / Average expression / Averaged pct expression
-  STAR QC tables 
-  QC Plots

## scn-pipeline: current and future plans

Repo:

-  Github Repo: [https://github.com/ctlab/scn-pipeline](https://github.com/ctlab/scn-pipeline)
-  Please use [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/)
-  Releases and changelogs are generated by `release-please` github action, that parses conventional commits for changes
-  Documentation [https://scn-pipeline.readthedocs.io/en/latest/](https://scn-pipeline.readthedocs.io/en/latest/) is build automatically from `docs`

Branches:

-  Branch "main" - only processing until Seurat file
-  Branch "scn" (work in progress) - all additional rules specific to SCN and lab in general (conversion of seurat object to internal SCN format, calculating PCAs for GESECA and any other file reformatting)

## scNavigator

- [https://artyomovlab.wustl.edu/scn/](https://artyomovlab.wustl.edu/scn/) - master
- [https://artyomovlab.wustl.edu/scn-dev/](https://artyomovlab.wustl.edu/scn/) - dev-single-gene-search

Current development version has many changes and quality of life improvements compared to master:

- Percentage option on bar plots
- Density plots
- Filtering tab has subsampling (to subsample dataset with a lot of cells)
- Pathways (coloring scheme, returns overlapping genes)
- Single gene search

## Gene Signature Search

![](images/gss.png)


## Single Gene Search

-  Idea is to find datasets and clusters where certain gene is expressed
-  Problem with the markers: if you only have T cells in the datasets, T-cell markers will not appear in markers (results of DE)
-  Hard to implement negative search (I want to find clusters with gene A, but not gene B)

## TF-IDF

TF-IDF is term frequency–inverse document frequency

- Words are terms, we have $|U_0|$ terms
- $U_i$ are documents
- $tf(g, U_i) = 1$ if $g \in U_i$ and $0$ otherwise
- $idf(g) = log(\frac{N}{|\{U_i | g \in U_i\}|})$
- $tfidf(g, U_i) = tf(g, U_i) * idf(g)$

## TF-IDF

TF-IDF is term frequency–inverse document frequency

- Genes are terms, we have $|U_0|$ terms
- $U_i$ are clusters
- $tf(g, U_i) = \%$, in how many cells gene $g$ is expressed
- $idf(g) = log(\frac{total\ number\ of\ cells}{total\ number\ of\ cells\ with\ detected\ gene\ g})$
- $tfidf(g, U_i) = tf(g, U_i) * idf(g)$

## TF-IDF

::: columns
:::{.column width="50%"}
![](images/gene_ranks.png)
:::
:::{.column width="50%"}
![](images/tf-idfs.png)
:::
:::


## Intelligent search using tf-idf

- For every cluster we can calculate in how many cells (percent) every gene is expressed
- This is basically a cluster "expression profile" 
- This information is much more than just markers - we can also see "background" expression


## Intelligent search using tf-idf

- We could calculate tf-idf vectors for all the clusters (and datasets)
- The query will have (1) for all genes from the query (-1) for all the genes we want to exclude, and (0) for all other genes
- We now have to quickly calculate cosine similarity against all the tf-idf vectors for the clusters
- There are algorithms that allow to do just this

![](images/falconn.png)

::: footer

[Practical and Optimal LSH for Angular Distance](http://papers.nips.cc/paper/5893-practical-and-optimal-lsh-for-angular-distance) Alexandr Andoni, Piotr Indyk, Thijs Laarhoven, Ilya Razenshteyn, Ludwig Schmidt NIPS 2015

[https://github.com/FALCONN-LIB/FALCONN](https://github.com/FALCONN-LIB/FALCONN)
:::


## Plans for scNavigator

- Start processing of a new dump for scNavigator (we need to start obtaining **at least** processed seurat RDS-objects)
- Implement the prototype for TF-IDF search (do I need to change any code from scNavigator to make it work)
- Merge /scn-dev/ into /scn/ and make it default
- Migrate all old objects to new format (possibly with minimal reprocessing)
- Add new technologies to "main" part of the pipeline
- Add "minimal" tests to "main" part of the pipeline





## Lymphatic Endothelial Cells story

::: columns
::: {.column width="65%"}
![](images/lec1.png)
:::

::: {.column width="35%"}
![](images/lec2.png)
:::
:::


Most of the results - Master Thesis of Diana Lupova

In collaboration with Rafael S. Czepielewski

::: footer

Gonzalez-Loyola et al, 2020 - Ad Drug Del Rev

Wong et al., 2018 – Dev Cell
:::


## Gene signature search


Table 1 - Genes we searched for

Table 2 - We exluded clusters expressing these genes

![](images/genes1.png)

## Search results

::: columns
:::{.column width="50%"}
Mouse:

- 56 single-cell RNA-seq datasets
- 279 408 cells from 14 tissues
- Extracted 2819 lymphatic endothelial cells

![](images/mouse_cells.png)
:::
:::{.column width="50%"}

Human:

- 12 single-cell RNA-seq datasets
- 140 221 cells from 5 tissues
- Extracted 2010 lymphatic endothelial cells

![](images/human_cells.png)
:::
:::


## LEC extraction - mouse cells

![](images/mouse_clustering.png)


## LEC extraction - human cells


![](images/human_clustering.png)


## LEC extraction - mouse literature markers

![](images/markers_mouse.png)

## LEC extraction - human literature markers

![](images/markers_human.png)

## Identification of novel markers

![](images/frequency_scheme.png)

## LEC extraction - mouse literature markers

![](images/markers_mouse_list.png)

## LEC extraction - human literature markers

![](images/markers_human_list.png)

## Recent victories - validation in tissues

